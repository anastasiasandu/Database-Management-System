--exercitiu 4
CREATE TABLE SPITAL(
    ID_SPITAL INT NOT NULL,
    NUME VARCHAR2(20),
    ADRESA VARCHAR2(100), 
    CONSTRAINT PK_SPITAL PRIMARY KEY (ID_SPITAL)
);
ALTER TABLE SPITAL
ADD ORAS VARCHAR2(20); 
ALTER TABLE SPITAL
ADD AN_INFIINTARE NUMBER(4);
ALTER TABLE SPITAL 
ADD NR_TELEFON VARCHAR2(10);
CREATE TABLE SECTIE(
    ID_SECTIE INT NOT NULL, 
    NUME VARCHAR2(30), 
    CONSTRAINT PK_SECTIE PRIMARY KEY (ID_SECTIE) 
);
ALTER TABLE SECTIE
ADD ETAJ NUMBER(2);


CREATE TABLE SPITAL_SECTIE(
    ID_SPITAL_SECTIE INT NOT NULL,
    ID_SPITAL INT, 
    ID_SECTIE INT, 
    CONSTRAINT PK_SPITAL_SECTIE PRIMARY KEY (ID_SPITAL_SECTIE),
    CONSTRAINT FK1_SPITAL_SECTIE FOREIGN KEY (ID_SPITAL) REFERENCES SPITAL(ID_SPITAL),
    CONSTRAINT FK2_SPITAL_SECTIE FOREIGN KEY (ID_SECTIE) REFERENCES SECTIE(ID_SECTIE)
);
CREATE TABLE SPECIALIZARE(
    ID_SPECIALIZARE INT NOT NULL,
    ID_SPECIALIZARE_MAMA INT,
    DENUMIRE VARCHAR2(20),
    CONSTRAINT PK_SPECIALIZARE PRIMARY KEY (ID_SPECIALIZARE),
    CONSTRAINT FK_SPECIALIZARE FOREIGN KEY (ID_SPECIALIZARE_MAMA) REFERENCES SPECIALIZARE(ID_SPECIALIZARE)
);

CREATE OR REPLACE TYPE TIP_ALERGII AS VARRAY(15) OF VARCHAR2(20);
/

CREATE TABLE PACIENT(
    ID_PACIENT INT NOT NULL,
    ID_SPITAL INT,
    NUME_PACIENT VARCHAR2(20),
    PRENUME_PACIENT VARCHAR2(20),
    VARSTA NUMBER(3),
    SEX VARCHAR2(10),
    LISTA_ALERGII TIP_ALERGII,
    CONSTRAINT PK_PACIENT PRIMARY KEY (ID_PACIENT),
    CONSTRAINT FK_PACIENT FOREIGN KEY (ID_SPITAL) REFERENCES SPITAL(ID_SPITAL)
);
ALTER TABLE PACIENT
ADD NR_TELEFON VARCHAR2(10);
CREATE TABLE PROGRAMARE(
    ID_PROGRAMARE INT NOT NULL,
    ID_PACIENT INT,
    ID_SECTIE INT,
    DATA_PROGRAMARE TIMESTAMP, 
    CONSTRAINT PK_PROGRAMARE PRIMARY KEY (ID_PROGRAMARE),
    CONSTRAINT FK1_PROGRAMARE FOREIGN KEY (ID_PACIENT) REFERENCES PACIENT(ID_PACIENT),
    CONSTRAINT FK2_PROGRAMARE FOREIGN KEY (ID_SECTIE) REFERENCES SECTIE(ID_SECTIE)    
); 
CREATE TABLE DOCTOR(
    ID_DOCTOR INT NOT NULL,
    ID_SPECIALIZARE INT,
    ID_SECTIE INT,
    ID_SPITAL INT,
    NUME_DOCTOR VARCHAR2(20),
    PRENUME_DOCTOR VARCHAR2(20),
    VARSTA NUMBER(3),
    SEX VARCHAR2(10),
    NR_TELEFON VARCHAR2(10),
    SALARIU NUMBER(5),
    CONSTRAINT PK_DOCTOR PRIMARY KEY (ID_DOCTOR),
    CONSTRAINT FK1_DOCTOR FOREIGN KEY (ID_SPECIALIZARE) REFERENCES SPECIALIZARE(ID_SPECIALIZARE),
    CONSTRAINT FK2_DOCTOR FOREIGN KEY (ID_SECTIE) REFERENCES SECTIE(ID_SECTIE),
    CONSTRAINT FK3_DOCTOR FOREIGN KEY (ID_SPITAL) REFERENCES SPITAL(ID_SPITAL)
); 
CREATE TABLE PROGRAM_DOCTOR(
    ID_PROGRAM_DOCTOR INT NOT NULL,
    ID_DOCTOR INT, 
    START_ORA NUMBER(2),
    END_ORA NUMBER(2),
    ZI VARCHAR2(10),
    CONSTRAINT PK_PROGRAM_DOCTOR PRIMARY KEY (ID_PROGRAM_DOCTOR),
    CONSTRAINT FK_PROGRAM_DOCTOR FOREIGN KEY (ID_DOCTOR) REFERENCES DOCTOR(ID_DOCTOR)
);
CREATE TABLE OPERATIE(
    ID_OPERATIE INT NOT NULL,
    START_ORA NUMBER(2), 
    SALA_OPERATIE NUMBER(3),
    CONSTRAINT PK_OPERATIE PRIMARY KEY (ID_OPERATIE)
);
CREATE TABLE DOCTOR_OPERATIE(
    ID_DOCTOR_OPERATIE INT NOT NULL,
    ID_OPERATIE INT,
    ID_DOCTOR INT,
    CONSTRAINT PK_DOCTOR_OPERATIE PRIMARY KEY (ID_DOCTOR_OPERATIE),
    CONSTRAINT FK1_DOCTOR_OPERATIE FOREIGN KEY (ID_OPERATIE) REFERENCES OPERATIE(ID_OPERATIE),
    CONSTRAINT FK2_DOCTOR_OPERATIE FOREIGN KEY (ID_DOCTOR) REFERENCES DOCTOR(ID_DOCTOR)
);
CREATE TABLE INTERNARE(
    ID_INTERNARE INT NOT NULL,
    ID_SECTIE INT, 
    ID_PACIENT INT,
    ID_SPITAL,
    CONSTRAINT PK_INTERNARE PRIMARY KEY (ID_INTERNARE),
    CONSTRAINT FK1_INTERNARE FOREIGN KEY (ID_SECTIE) REFERENCES SECTIE(ID_SECTIE),
    CONSTRAINT FK2_INTERNARE FOREIGN KEY (ID_PACIENT) REFERENCES PACIENT(ID_PACIENT),
    CONSTRAINT FK3_INTERNARE FOREIGN KEY (ID_SPITAL) REFERENCES SPITAL(ID_SPITAL)
);
ALTER TABLE INTERNARE
ADD STATUS NUMBER(1);

ALTER TABLE INTERNARE
ADD DATA_INTERNARE DATE;

CREATE TABLE OPERATIE_INTERNARE(
    ID_OPERATIE_INTERNARE INT NOT NULL, 
    ID_INTERNARE INT,
    ID_OPERATIE INT,
    CONSTRAINT PK_OPERATIE_INTERNARE PRIMARY KEY (ID_OPERATIE_INTERNARE),
    CONSTRAINT FK1_OPERATIE_INTERNARE FOREIGN KEY (ID_INTERNARE) REFERENCES INTERNARE(ID_INTERNARE),
    CONSTRAINT FK2_OPERATIE_INTERNARE FOREIGN KEY (ID_OPERATIE) REFERENCES OPERATIE(ID_OPERATIE)
);
CREATE TABLE CONSULT(
    ID_CONSULT INT NOT NULL,
    ID_INTERNARE INT,
    ID_DOCTOR INT,
    CONSTRAINT PK_CONSULT PRIMARY KEY (ID_CONSULT),
    CONSTRAINT FK1_CONSULT FOREIGN KEY (ID_INTERNARE) REFERENCES INTERNARE(ID_INTERNARE),
    CONSTRAINT FK2_CONSULT FOREIGN KEY (ID_DOCTOR) REFERENCES DOCTOR(ID_DOCTOR)
);
CREATE OR REPLACE TYPE TIP_MEDICAMENTE AS VARRAY(15) OF VARCHAR2(20);
/
CREATE TABLE RETETA(
    ID_RETETA INT NOT NULL,
    ID_DOCTOR INT,
    ID_PACIENT INT,
    ID_CONSULT INT,
    LISTA_MEDICAMENTE TIP_MEDICAMENTE,
    CONSTRAINT PK_RETETA PRIMARY KEY (ID_RETETA),
    CONSTRAINT FK1_RETETA FOREIGN KEY (ID_DOCTOR) REFERENCES DOCTOR(ID_DOCTOR),
    CONSTRAINT FK2_RETETA FOREIGN KEY (ID_PACIENT) REFERENCES PACIENT(ID_PACIENT),
    CONSTRAINT FK3_RETETA FOREIGN KEY (ID_CONSULT) REFERENCES CONSULT(ID_CONSULT) 
);
ALTER TABLE RETETA
DROP COLUMN ID_DOCTOR;
ALTER TABLE RETETA
DROP COLUMN ID_PACIENT;



--exercitiu 5
INSERT INTO SPITAL
VALUES (1,'Spitalul Floreasca','Calea Floreasca 8','Bucuresti',1934,'0798786514');
INSERT INTO SPITAL
VALUES (2,'Spitalul Fundeni','Șoseaua Fundeni 258','Bucuresti',1959,'0865379856');
INSERT INTO SPITAL
VALUES (3,'Spitalul Judetean','Strada Crișan 9','Slatina',1903,'0746816827');
INSERT INTO SPITAL
VALUES (4,'Spitalul Sf Ioan','Șoseaua Vitan-Bârzești 13','Bucuresti',1979,'0789657812');
INSERT INTO SPITAL
VALUES (5,'Spitalul Mocrea','Șoseaua Primaverii 19','Arad',1979,'0789657812');
INSERT INTO SPITAL
VALUES (6,'Spitalul Sf Ioan','Strada Vederii 28','Timisoara',1956,'0789984322');


INSERT INTO SECTIE
VALUES (1,'Cardiologie',1);
INSERT INTO SECTIE
VALUES (2,'Neurologie',2);
INSERT INTO SECTIE
VALUES (3,'Pediatrie',3);
INSERT INTO SECTIE
VALUES (4,'Oftalmologie',4);
INSERT INTO SECTIE
VALUES (5,'Pneumonie',5);
INSERT INTO SECTIE
VALUES (6,'Chirurgie',5);
INSERT INTO SECTIE
VALUES (7,'Oncologie',5);



INSERT INTO SPITAL_SECTIE
VALUES (1,1,2);
INSERT INTO SPITAL_SECTIE
VALUES (2,1,3);
INSERT INTO SPITAL_SECTIE
VALUES (3,1,4);
INSERT INTO SPITAL_SECTIE
VALUES (4,1,5);
INSERT INTO SPITAL_SECTIE
VALUES (5,2,3);
INSERT INTO SPITAL_SECTIE
VALUES (6,3,5);
INSERT INTO SPITAL_SECTIE
VALUES (7,3,4);
INSERT INTO SPITAL_SECTIE
VALUES (8,4,1);
INSERT INTO SPITAL_SECTIE
VALUES (9,5,2);
INSERT INTO SPITAL_SECTIE
VALUES (10,5,3);


INSERT INTO SPECIALIZARE
VALUES (1,NULL,'Cardiologie');
INSERT INTO SPECIALIZARE
VALUES (2,1,'Cardio-oncologie');
INSERT INTO SPECIALIZARE
VALUES (3,NULL,'Oncologie');
INSERT INTO SPECIALIZARE
VALUES (4,3,'Oncologie pediatrica');
INSERT INTO SPECIALIZARE
VALUES (5,NULL,'Chirurgie');
INSERT INTO SPECIALIZARE
VALUES (6,5,'Chirurgie vasculara');
 

DECLARE 
    alergii TIP_ALERGII:=TIP_ALERGII();  
BEGIN
    alergii.extend;
    alergii(1):='Cardiovit'; 
    INSERT INTO PACIENT
    VALUES (1,2,'Sandu','Anastasia',20,'Feminin',alergii,'0746816827');
    alergii(1):='Panangin';    
    INSERT INTO PACIENT
    VALUES (2,3,'Danescu','Adela',20,'Feminin',alergii,'0760283936');
    alergii(1):='Magnerot';
    INSERT INTO PACIENT
    VALUES (3,5,'Mihailescu','Teodor',20,'Masculin',alergii,'0787353720');
    alergii(1):='Aspenter';  
    INSERT INTO PACIENT 
    VALUES (4,1,'Dirtu','Ecaterina',20,'Feminin',alergii,'0745382125');
    alergii(1):='Cardiovit';
    alergii.extend;
    alergii(2):='Aspenter';
    INSERT INTO PACIENT
    VALUES (5,4,'Harnagea','Andrei',20,'Masculin',alergii,'0760856721');
    
    INSERT INTO PACIENT
    VALUES (6,5,'Oancea','Antonia',20,'Feminin',NULL,'0760324721');
    INSERT INTO PACIENT
    VALUES (7,3,'Cristea','Eduard',20,'Masculin',NULL,'0456889827');
    INSERT INTO PACIENT
    VALUES (8,4,'Petrescu','Alexandru',20,'Masculin',NULL,'0843215643');
    INSERT INTO PACIENT
    VALUES (9,2,'Pita','Bogdan',20,'Masculin',NULL,'0654329831');
END;



INSERT INTO PROGRAMARE
VALUES (1,5,1,TO_DATE('20/01/2023:12:00:00PM', 'DD-MM-YYYY HH:MI:SSPM'));
INSERT INTO PROGRAMARE
VALUES (2,4,2,TO_DATE('08/02/2023:08:00:00PM', 'DD-MM-YYYY HH:MI:SSPM'));
INSERT INTO PROGRAMARE
VALUES (3,3,3,TO_DATE('27/02/2023:04:30:00PM', 'DD-MM-YYYY HH:MI:SSPM'));
INSERT INTO PROGRAMARE
VALUES (4,2,4,TO_DATE('07/03/2023:03:45:00PM', 'DD-MM-YYYY HH:MI:SSPM'));
INSERT INTO PROGRAMARE
VALUES (5,1,5,TO_DATE('30/04/2024:06:00:00PM', 'DD-MM-YYYY HH:MI:SSPM'));
INSERT INTO PROGRAMARE
VALUES (6,6,7,TO_DATE('01/09/2023:12:00:00PM', 'DD-MM-YYYY HH:MI:SSPM'));
INSERT INTO PROGRAMARE
VALUES (7,8,6,TO_DATE('17/08/2023:01:00:00PM', 'DD-MM-YYYY HH:MI:SSPM'));
INSERT INTO PROGRAMARE
VALUES (8,4,3,TO_DATE('28/06/2023:09:00:00PM', 'DD-MM-YYYY HH:MI:SSPM'));
INSERT INTO PROGRAMARE
VALUES (9,9,1,TO_DATE('11/02/2023:01:00:00PM', 'DD-MM-YYYY HH:MI:SSPM'));


INSERT INTO DOCTOR 
VALUES (1,1,1,1,'Gandore','Mihai',39,'Masculin','0746816827',1500);
INSERT INTO DOCTOR 
VALUES (2,1,1,2,'Nistor','George',47,'Masculin','0767983467',1750);
INSERT INTO DOCTOR
VALUES (3,3,6,4,'Stanciu','Sergiu',31,'Masculin','0745783568',2400);
INSERT INTO DOCTOR
VALUES (4,4,6,1,'Hurloi','Selena',39,'Feminin','0798672312',1350);
INSERT INTO DOCTOR
VALUES (5,6,7,5,'Alex','Andrei',55,'Masculin','0776654123',2000);
INSERT INTO DOCTOR 
VALUES (6,2,5,2,'Florea','George',28,'Masculin','0746754827',1700);

 
INSERT INTO OPERATIE 
VALUES (1,10,77);
INSERT INTO OPERATIE 
VALUES (2,12,103);
INSERT INTO OPERATIE 
VALUES (3,08,271);
INSERT INTO OPERATIE 
VALUES (4,15,41);
INSERT INTO OPERATIE 
VALUES (5,14,210);




INSERT INTO DOCTOR_OPERATIE
VALUES (1,2,3);
INSERT INTO DOCTOR_OPERATIE
VALUES (2,3,4);
INSERT INTO DOCTOR_OPERATIE
VALUES (3,5,1);
INSERT INTO DOCTOR_OPERATIE
VALUES (4,1,5);
INSERT INTO DOCTOR_OPERATIE
VALUES (5,2,2);
INSERT INTO DOCTOR_OPERATIE
VALUES (6,5,2);
INSERT INTO DOCTOR_OPERATIE
VALUES (7,1,1);
INSERT INTO DOCTOR_OPERATIE
VALUES (8,4,5);
INSERT INTO DOCTOR_OPERATIE
VALUES (9,5,4);
INSERT INTO DOCTOR_OPERATIE
VALUES (10,3,3);



INSERT INTO INTERNARE
VALUES (1,2,5,3,1,TO_DATE('20/01/2023', 'DD-MM-YYYY'));
INSERT INTO INTERNARE
VALUES (2,5,1,4,1,TO_DATE('17/02/2023', 'DD-MM-YYYY'));
INSERT INTO INTERNARE
VALUES (3,4,2,5,0,NULL);
INSERT INTO INTERNARE
VALUES (4,1,3,2,1,TO_DATE('07/07/2023', 'DD-MM-YYYY'));
INSERT INTO INTERNARE
VALUES (5,3,4,1,0,NULL);



INSERT INTO OPERATIE_INTERNARE 
VALUES (1,2,5);
INSERT INTO OPERATIE_INTERNARE 
VALUES (2,3,4);
INSERT INTO OPERATIE_INTERNARE 
VALUES (3,4,2);
INSERT INTO OPERATIE_INTERNARE 
VALUES (4,1,3);
INSERT INTO OPERATIE_INTERNARE 
VALUES (5,5,1);
INSERT INTO OPERATIE_INTERNARE 
VALUES (6,4,2);
INSERT INTO OPERATIE_INTERNARE 
VALUES (7,3,1);
INSERT INTO OPERATIE_INTERNARE 
VALUES (8,2,5);
INSERT INTO OPERATIE_INTERNARE 
VALUES (9,1,3);
INSERT INTO OPERATIE_INTERNARE 
VALUES (10,3,4);



INSERT INTO CONSULT
VALUES (1,2,5);
INSERT INTO CONSULT
VALUES (2,3,4);
INSERT INTO CONSULT
VALUES (3,5,2);
INSERT INTO CONSULT
VALUES (4,1,1);
INSERT INTO CONSULT
VALUES (5,4,3);



DECLARE 
    medicamente TIP_MEDICAMENTE:=TIP_MEDICAMENTE();  
BEGIN
    medicamente.extend;
    medicamente(1):='Cardiovit';
    medicamente.extend;
    medicamente(2):='Aspenter';
    medicamente.extend;
    medicamente(3):='Magnerot';
    medicamente.extend;
    medicamente(4):='Protecardin';
    INSERT INTO RETETA
    VALUES (1,3,medicamente);
    medicamente(1):='Aspenter'; 
    medicamente(2):='Panangin'; 
    medicamente(3):='Thrombo'; 
    medicamente(4):='Dipiridamol';
    medicamente.extend;
    medicamente(5):='Helcor'; 
    INSERT INTO RETETA
    VALUES (2,4,medicamente);
    medicamente(1):='Rompirin'; 
    medicamente(2):='Santepirin'; 
    medicamente(3):='Phelodia'; 
    medicamente(4):='Aspacardin'; 
    medicamente(5):='Aspimax';
    medicamente.extend;
    medicamente(6):='Magnerot';
    INSERT INTO RETETA
    VALUES (3,1,medicamente);
    medicamente(1):='Meglucon'; 
    medicamente(2):='Glucophage'; 
    medicamente(3):='Meglucon'; 
    medicamente(4):='Metformax'; 
    medicamente(5):='Ibuprofen'; 
    medicamente(6):='Belformin';
    medicamente.extend;
    medicamente.extend;
    medicamente(7):='Siofor';
    medicamente(8):='Aglurab';
    INSERT INTO RETETA
    VALUES (4,5,medicamente);
    medicamente(1):='Glucovance'; 
    medicamente(2):='Gluformin'; 
    medicamente(3):='Metformin'; 
    medicamente(4):='Neomid'; 
    medicamente(5):='Brot'; 
    medicamente(6):='Glibomet'; 
    medicamente(7):='Normaglyc';
    medicamente(8):='Langerin';
    INSERT INTO RETETA
    VALUES (5,2,medicamente);
END;
alter table reteta 
drop column id_pacient
alter table reteta 
drop column id_doctor



INSERT INTO PROGRAM_DOCTOR
VALUES (1,5,10,20,'FRIDAY');
INSERT INTO PROGRAM_DOCTOR
VALUES (2,3,08,16,'THURSDAY');
INSERT INTO PROGRAM_DOCTOR
VALUES (3,2,12,22,'SATURDAY');
INSERT INTO PROGRAM_DOCTOR
VALUES (4,4,14,02,'MONDAY');
INSERT INTO PROGRAM_DOCTOR
VALUES (5,1,12,22,'WEDNESDAY');


--exercitiu 6
CREATE OR REPLACE PROCEDURE P6(DENUMIRE SPITAL.NUME%TYPE)
IS
    TYPE ORE_VECTOR IS VARRAY(100) OF NUMBER(2); 
    TYPE ZI_VECTOR IS VARRAY(100) OF VARCHAR2(10); 
    TYPE DOCTOR_RECORD IS RECORD
    (NUME DOCTOR.NUME_DOCTOR%TYPE,
    PRENUME DOCTOR.PRENUME_DOCTOR%TYPE,
    START_ORA ORE_VECTOR,
    END_ORA ORE_VECTOR,
    ZI ZI_VECTOR); 
    TYPE DOCTOR_VECTOR IS VARRAY(100) OF DOCTOR_RECORD;
    T DOCTOR_VECTOR:= DOCTOR_VECTOR(); 
    NUME_SPITAL SPITAL.NUME%TYPE; 
    NR NUMBER(2);
    
    CURSOR c IS 
        SELECT NUME_DOCTOR, PRENUME_DOCTOR 
        FROM SPITAL S
        JOIN DOCTOR D ON (D.ID_SPITAL=S.ID_SPITAL)
        JOIN PROGRAM_DOCTOR P ON (D.ID_DOCTOR=P.ID_DOCTOR)
        WHERE NUME=DENUMIRE;
BEGIN
    SELECT NUME
    INTO NUME_SPITAL
    FROM SPITAL
    WHERE NUME=DENUMIRE;
    DBMS_OUTPUT.PUT_LINE('Spitalul ales este : ' || NUME_SPITAL);
    
    SELECT COUNT(NUME_DOCTOR)
    INTO NR
    FROM DOCTOR D
    JOIN SPITAL S ON (D.ID_SPITAL=S.ID_SPITAL)
    WHERE NUME=DENUMIRE;

    IF NR=0 THEN
        DBMS_OUTPUT.PUT_LINE('Nu lucreaza doctori la acest spital.');
    ELSIF NR=1 THEN
        DBMS_OUTPUT.PUT_LINE('Numarul de doctori care lucreaza in acest spital este : ' || NR);
        DBMS_OUTPUT.PUT_LINE('Doctorul si programul lui sunt : ');
    ELSE 
        DBMS_OUTPUT.PUT_LINE('Numarul de doctori care lucreaza in acest spital este : ' || NR);
        DBMS_OUTPUT.PUT_LINE('Doctorii si programul lor sunt : ');
    END IF;
    
    FOR C_DOCTOR IN C LOOP
        T.EXTEND;
        T(T.LAST).NUME:=C_DOCTOR.NUME_DOCTOR;
        T(T.LAST).PRENUME:=C_DOCTOR.PRENUME_DOCTOR; 
        
        SELECT START_ORA, END_ORA, ZI
        BULK COLLECT INTO
        T(T.LAST).START_ORA, T(T.LAST).END_ORA, T(T.LAST).ZI
        FROM SPITAL S
        JOIN DOCTOR D ON (D.ID_SPITAL=S.ID_SPITAL)
        JOIN PROGRAM_DOCTOR P ON (D.ID_DOCTOR=P.ID_DOCTOR)
        WHERE D.NUME_DOCTOR=C_DOCTOR.NUME_DOCTOR AND D.PRENUME_DOCTOR=C_DOCTOR.PRENUME_DOCTOR; 
    END LOOP; 
    
    FOR I IN T.FIRST..T.LAST LOOP
        DBMS_OUTPUT.PUT_LINE(T(I).NUME || ' ' || T(I).PRENUME);
        FOR J IN T(I).START_ORA.FIRST..T(I).START_ORA.LAST LOOP
            DBMS_OUTPUT.PUT_LINE('In ziua de ' || T(I).ZI(J) || ' lucreaza de la ' || T(I).START_ORA(J) || ' la ' || T(I).END_ORA(J));
        END LOOP;
    END LOOP;
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000,'Nu exista spitale cu numele dat');
        WHEN TOO_MANY_ROWS THEN
            RAISE_APPLICATION_ERROR(-20001,'Exista mai multe spitale cu numele dat');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');
END P6;
/


BEGIN
    P6('Spitalul Sf Ioan');
END;
/




--exercitiu 7
CREATE OR REPLACE PROCEDURE P7(DENUMIRE SPITAL.NUME%TYPE)
IS 
    AUX_DATA_PROGRAMARE PROGRAMARE.DATA_PROGRAMARE%TYPE;
    AUX_COD_SECTIE PROGRAMARE.ID_SECTIE%TYPE;
    NUME DOCTOR.NUME_DOCTOR%TYPE;
    PRENUME DOCTOR.PRENUME_DOCTOR%TYPE;
    NUME_SPITAL SPITAL.NUME%TYPE;
    
    CURSOR A IS 
        SELECT DATA_PROGRAMARE, PROG.ID_SECTIE 
        FROM SPITAL S
        INNER JOIN PACIENT P ON(S.ID_SPITAL=P.ID_SPITAL)
        INNER JOIN PROGRAMARE PROG ON(P.ID_PACIENT=PROG.ID_PACIENT)
        WHERE S.NUME=DENUMIRE;  
        
    CURSOR B(DATA_PROGRAMARE PROGRAMARE.DATA_PROGRAMARE%TYPE,COD_SECTIE PROGRAMARE.ID_SECTIE%TYPE) IS 
        SELECT NUME_DOCTOR, PRENUME_DOCTOR
        FROM DOCTOR D
        INNER JOIN PROGRAM_DOCTOR P ON(D.ID_DOCTOR=P.ID_DOCTOR) 
        INNER JOIN SPITAL S ON(D.ID_SPITAL=S.ID_SPITAL)
        WHERE S.NUME = DENUMIRE AND D.ID_SECTIE=COD_SECTIE AND EXTRACT(HOUR FROM DATA_PROGRAMARE) BETWEEN P.START_ORA AND P.END_ORA;
BEGIN
    SELECT NUME 
    INTO NUME_SPITAL
    FROM SPITAL
    WHERE NUME=DENUMIRE;
    
    DBMS_OUTPUT.PUT_LINE('Spitalul ales este ' || ' ' || NUME_SPITAL);

    OPEN A;
    LOOP 
        FETCH A INTO AUX_DATA_PROGRAMARE,AUX_COD_SECTIE;
        EXIT WHEN A%NOTFOUND;
        IF B%ISOPEN THEN 
            CLOSE B;
        END IF; 
        OPEN B(AUX_DATA_PROGRAMARE,AUX_COD_SECTIE);
        LOOP
            FETCH B INTO NUME,PRENUME; 
            DBMS_OUTPUT.PUT_LINE(NUME || ' ' || PRENUME);
            EXIT WHEN B%NOTFOUND; 
        END LOOP;
        CLOSE B;
    END LOOP;
    CLOSE A;  
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000,'Nu exista spitalul cu numele dat');
        WHEN TOO_MANY_ROWS THEN
            RAISE_APPLICATION_ERROR(-20001,'Exista mai multe spitale cu numele dat');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');
END P7;
/
 
BEGIN
    P7('Spitalul Fundeni);
END;
/



--exercitiu 8

CREATE OR REPLACE FUNCTION F8(NUME PACIENT.NUME_PACIENT%TYPE)
RETURN TIP_MEDICAMENTE 
IS 
    NOUA_LISTA_MEDICAMENTE TIP_MEDICAMENTE:= TIP_MEDICAMENTE();
    AUX_LISTA_MEDICAMENTE TIP_MEDICAMENTE:=TIP_MEDICAMENTE();
    AUX_LISTA_ALERGII TIP_ALERGII:=TIP_ALERGII();  
    AUX1_LISTA_ALERGII TIP_ALERGII:=TIP_ALERGII();  
    NR NUMBER(2);
    AUX_NR NUMBER(2);
    COD_SECTIE SECTIE.ID_SECTIE%TYPE;
    COD_DOCTOR DOCTOR.ID_DOCTOR%TYPE;
    COD_SPITAL SPITAL.ID_SPITAL%TYPE;
    COD_RETETA RETETA.ID_RETETA%TYPE;
BEGIN
    AUX_LISTA_MEDICAMENTE.EXTEND;
    AUX_LISTA_MEDICAMENTE(1):='XX';

    SELECT NVL(LISTA_MEDICAMENTE,AUX_LISTA_MEDICAMENTE)
    INTO NOUA_LISTA_MEDICAMENTE
    FROM RETETA R 
    INNER JOIN CONSULT C ON (C.ID_CONSULT = R.ID_CONSULT)
    INNER JOIN INTERNARE I ON(I.ID_INTERNARE = C.ID_INTERNARE)
    INNER JOIN PACIENT P ON(P.ID_PACIENT = I.ID_PACIENT)
    WHERE NUME_PACIENT=NUME;
    
    SELECT ID_RETETA
    INTO COD_RETETA
    FROM RETETA R 
    INNER JOIN CONSULT C ON (C.ID_CONSULT = R.ID_CONSULT)
    INNER JOIN INTERNARE I ON(I.ID_INTERNARE = C.ID_INTERNARE)
    INNER JOIN PACIENT P ON(P.ID_PACIENT = I.ID_PACIENT)
    WHERE NUME_PACIENT=NUME;
    
    SELECT D.ID_DOCTOR
    INTO COD_DOCTOR
    FROM DOCTOR D 
    INNER JOIN CONSULT C ON(C.ID_DOCTOR=D.ID_DOCTOR)
    INNER JOIN RETETA R ON(R.ID_CONSULT=C.ID_CONSULT)
    WHERE ID_RETETA=COD_RETETA; 
    
    SELECT D.ID_SECTIE  
    INTO COD_SECTIE
    FROM DOCTOR D 
    INNER JOIN CONSULT C ON(C.ID_DOCTOR=D.ID_DOCTOR)
    INNER JOIN RETETA R ON(R.ID_CONSULT=C.ID_CONSULT)
    WHERE ID_RETETA=COD_RETETA;
    
    AUX1_LISTA_ALERGII.EXTEND;
    AUX1_LISTA_ALERGII(1):='XX';

    SELECT NVL(LISTA_ALERGII,AUX_LISTA_ALERGII), ID_SPITAL 
    INTO AUX_LISTA_ALERGII, COD_SPITAL
    FROM PACIENT
    WHERE NUME_PACIENT=NUME;

    NR:=0;
    NR:=NOUA_LISTA_MEDICAMENTE.COUNT;
    AUX_NR:=NR;

    FOR I IN 1..AUX_NR LOOP
        FOR J IN AUX_LISTA_ALERGII.FIRST..AUX_LISTA_ALERGII.LAST LOOP
            IF NOUA_LISTA_MEDICAMENTE(I)=AUX_LISTA_ALERGII(J) THEN
                FOR K IN I..AUX_NR-1 LOOP
                    NOUA_LISTA_MEDICAMENTE(K):=NOUA_LISTA_MEDICAMENTE(K+1);  
                END LOOP;
                AUX_NR:=AUX_NR-1;
            END IF;
        END LOOP;
    END LOOP;

    IF AUX_NR < NR THEN 
        DBMS_OUTPUT.PUT_LINE('S-au gasit medicamente la care pacientul ' || NUME || ' are alergii. Reteta corecta este : ');
        FOR I IN 1..AUX_NR LOOP
            DBMS_OUTPUT.PUT_LINE(NOUA_LISTA_MEDICAMENTE(I));
        END LOOP; 
        DBMS_OUTPUT.PUT_LINE('Ne pare rau pentru greseala! Doctorului i se va scadea salariul.');
        
        UPDATE DOCTOR A
        SET A.SALARIU =
            (SELECT MIN(B.SALARIU)
            FROM DOCTOR B
            WHERE A.ID_SECTIE=B.ID_SECTIE AND A.ID_SPITAL=B.ID_SPITAL)
        WHERE ID_DOCTOR=COD_DOCTOR;    
    ELSE 
        DBMS_OUTPUT.PUT_LINE('Nu s-au gasit medicamente la care ' || NUME || ' este alergic.');
    END IF; 

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000,'Nu exista pacienti cu numele dat');
        WHEN TOO_MANY_ROWS THEN
            RAISE_APPLICATION_ERROR(-20001,'Exista mai multi pacienti cu numele dat');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');

RETURN NOUA_LISTA_MEDICAMENTE;

END F8;
 


select * from doctor

 
DECLARE
    AUX_MEDICAMENTE RETETA.LISTA_MEDICAMENTE%TYPE;
BEGIN
    AUX_MEDICAMENTE:=F8('Sandu');
END;


--exercitiu 9
CREATE OR REPLACE TYPE TIP_DOCTORI AS VARRAY(100) OF VARCHAR2(30);
/

CREATE OR REPLACE PROCEDURE P9(DENUMIRE SPITAL.NUME%TYPE)
IS
    DOCTORI TIP_DOCTORI:=TIP_DOCTORI();
    COD_SPITAL SPITAL.ID_SPITAL%TYPE;
    NUME_D DOCTOR.NUME_DOCTOR%TYPE;
    PRENUME_D DOCTOR.PRENUME_DOCTOR%TYPE;
BEGIN
    SELECT ID_SPITAL
    INTO COD_SPITAL
    FROM SPITAL
    WHERE NUME=DENUMIRE;
    
    SELECT DISTINCT D.ID_DOCTOR 
    BULK COLLECT INTO DOCTORI
    FROM DOCTOR D
    INNER JOIN DOCTOR_OPERATIE DO ON(D.ID_DOCTOR=DO.ID_DOCTOR)
    INNER JOIN OPERATIE O ON(O.ID_OPERATIE=DO.ID_OPERATIE)
    INNER JOIN OPERATIE_INTERNARE OI ON(OI.ID_OPERATIE=O.ID_OPERATIE)
    INNER JOIN INTERNARE I ON(I.ID_INTERNARE=OI.ID_INTERNARE)
    INNER JOIN SPITAL S ON(S.ID_SPITAL=I.ID_SPITAL)
    INNER JOIN PROGRAM_DOCTOR PD ON(PD.ID_DOCTOR=D.ID_DOCTOR)
    WHERE D.ID_SPITAL=COD_SPITAL AND PD.END_ORA<O.START_ORA;

    
    UPDATE DOCTOR 
    SET SALARIU = SALARIU + SALARIU * 0.1
    WHERE ID_DOCTOR IN 
        (SELECT DISTINCT D.ID_DOCTOR 
        FROM DOCTOR D
        INNER JOIN DOCTOR_OPERATIE DO ON(D.ID_DOCTOR=DO.ID_DOCTOR)
        INNER JOIN OPERATIE O ON(O.ID_OPERATIE=DO.ID_OPERATIE)
        INNER JOIN OPERATIE_INTERNARE OI ON(OI.ID_OPERATIE=O.ID_OPERATIE)
        INNER JOIN INTERNARE I ON(I.ID_INTERNARE=OI.ID_INTERNARE)
        INNER JOIN SPITAL S ON(S.ID_SPITAL=I.ID_SPITAL)
        INNER JOIN PROGRAM_DOCTOR PD ON(PD.ID_DOCTOR=D.ID_DOCTOR)
        WHERE D.ID_SPITAL=COD_SPITAL AND PD.END_ORA<O.START_ORA);
        
    IF DOCTORI.COUNT=0 THEN
        DBMS_OUTPUT.PUT_LINE('Nu exista doctori care sa lucreze peste program la spitalul ' || DENUMIRE);
    ELSIF DOCTORI.COUNT=1 THEN
        DBMS_OUTPUT.PUT_LINE('Doctorul este caruia i s-a marit salariul este: ');
    ELSE 
        DBMS_OUTPUT.PUT_LINE('Doctorii carora li s-a marit salariul sunt: ');   
    END IF;
    
    FOR I IN DOCTORI.FIRST..DOCTORI.LAST LOOP
        SELECT NUME_DOCTOR, PRENUME_DOCTOR
        INTO NUME_D, PRENUME_D
        FROM DOCTOR 
        WHERE ID_DOCTOR=DOCTORI(I);
        DBMS_OUTPUT.PUT_LINE(NUME_D || ' ' || PRENUME_D);
    END LOOP;
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000,'Nu exista spitale cu numele dat');
        WHEN TOO_MANY_ROWS THEN
            RAISE_APPLICATION_ERROR(-20001,'Exista mai multe spitale cu numele dat');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');
END P9;

BEGIN
    P9('Spitalul Judetean');
END;

BEGIN
    P9('Spitalul Floreasca');
END;


--exercitiu 10
CREATE OR REPLACE TRIGGER trig10
    BEFORE INSERT OR UPDATE OR DELETE ON PROGRAMARE
BEGIN
    IF TO_CHAR(sysdate, 'DD-MM') = '01-01' OR TO_CHAR(sysdate, 'DD-MM') = '01-12' OR TO_CHAR(sysdate, 'DD-MM') = '25-12'
    THEN
        RAISE_APPLICATION_ERROR(-20001,'Nu se pot face modificari de sarbatori!');
    END IF;
END;
/ 

INSERT INTO PROGRAMARE
VALUES (9,5,2,TO_DATE('29/09/2023:08:00:00PM', 'DD-MM-YYYY HH:MI:SSPM'));


--exercitiu 11

CREATE OR REPLACE TRIGGER trig11
    BEFORE UPDATE OF DATA_PROGRAMARE ON PROGRAMARE
    FOR EACH ROW
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
    NR NUMBER :=0;
BEGIN
    SELECT COUNT(*) 
    INTO NR
    FROM PROGRAMARE P
    INNER JOIN SECTIE S ON(P.ID_SECTIE=S.ID_SECTIE)
    INNER JOIN DOCTOR D ON(D.ID_SECTIE=S.ID_SECTIE)
    INNER JOIN PROGRAM_DOCTOR PROG ON (PROG.ID_DOCTOR=D.ID_DOCTOR)
    WHERE p.id_programare=:new.id_programare AND EXTRACT(HOUR FROM :NEW.DATA_PROGRAMARE) BETWEEN PROG.START_ORA AND PROG.END_ORA AND TO_CHAR(:NEW.DATA_PROGRAMARE, 'DAY')=PROG.ZI;
    
    IF NR=0 THEN
        RAISE_APPLICATION_ERROR(-20002,'Nu se poate modifica data programarii deoarece nu lucreaza niciun doctor la aceasta data!');
    END IF;
END;
/ 

UPDATE PROGRAMARE
SET DATA_PROGRAMARE = TO_DATE('20/01/2023:12:00:00PM', 'DD-MM-YYYY HH:MI:SSPM')
WHERE ID_PROGRAMARE=1;


--exercitiu 12

CREATE TABLE ANASTASIA_MODIFICARI
    (UTILIZATOR VARCHAR2(30),
    NUME_BD VARCHAR2(50),
    EVENIMENT VARCHAR2(20),
    NUME_OBIECT VARCHAR2(30),
    DATA_EVENIMENTULUI DATE);
    
SELECT * FROM ANASTASIA_MODIFICARI;

CREATE OR REPLACE TRIGGER TRIG12
    AFTER CREATE OR ALTER OR DROP ON SCHEMA
BEGIN
    INSERT INTO ANASTASIA_MODIFICARI 
    VALUES(SYS.LOGIN_USER, SYS.DATABASE_NAME, SYS.SYSEVENT, SYS.DICTIONARY_OBJ_NAME, SYSDATE);
END;
/

CREATE TABLE ASISTENTA(
    ID_ASISTENTA INT NOT NULL,
    NUME_ASISTENTA VARCHAR2(20),
    PRENUME_ASISTENTA VARCHAR2(20), 
    CONSTRAINT PK_ASISTENTA PRIMARY KEY (ID_ASISTENTA)
);
ALTER TABLE ASISTENTA
DROP COLUMN PRENUME_ASISTENTA;
ALTER TABLE ASISTENTA
ADD VARSTA NUMBER(2);
DROP TABLE ASISTENTA;
SELECT * FROM ANASTASIA_MODIFICARI;


--exercitiu 13 
CREATE OR REPLACE PACKAGE PACHET13 AS
    PROCEDURE P6(DENUMIRE SPITAL.NUME%TYPE);
    PROCEDURE P7(DENUMIRE SPITAL.NUME%TYPE);
    FUNCTION F8(NUME PACIENT.NUME_PACIENT%TYPE)
    RETURN TIP_MEDICAMENTE;
    PROCEDURE P9(DENUMIRE SPITAL.NUME%TYPE);
END PACHET13;
/
CREATE OR REPLACE PACKAGE BODY PACHET13 IS 
    PROCEDURE P6(DENUMIRE SPITAL.NUME%TYPE)
IS
    TYPE ORE_VECTOR IS VARRAY(100) OF NUMBER(2); 
    TYPE ZI_VECTOR IS VARRAY(100) OF VARCHAR2(10); 
    TYPE DOCTOR_RECORD IS RECORD
    (NUME DOCTOR.NUME_DOCTOR%TYPE,
    PRENUME DOCTOR.PRENUME_DOCTOR%TYPE,
    START_ORA ORE_VECTOR,
    END_ORA ORE_VECTOR,
    ZI ZI_VECTOR); 
    TYPE DOCTOR_VECTOR IS VARRAY(100) OF DOCTOR_RECORD;
    T DOCTOR_VECTOR:= DOCTOR_VECTOR(); 
    NUME_SPITAL SPITAL.NUME%TYPE; 
    NR NUMBER(2);
    
    CURSOR C IS 
        SELECT NUME_DOCTOR, PRENUME_DOCTOR 
        FROM SPITAL S
        JOIN DOCTOR D ON (D.ID_SPITAL=S.ID_SPITAL)
        JOIN PROGRAM_DOCTOR P ON (D.ID_DOCTOR=P.ID_DOCTOR)
        WHERE NUME=DENUMIRE;
BEGIN
    SELECT NUME
    INTO NUME_SPITAL
    FROM SPITAL
    WHERE NUME=DENUMIRE;
    DBMS_OUTPUT.PUT_LINE('Spitalul ales este : ' || NUME_SPITAL);
    
    SELECT COUNT(NUME_DOCTOR)
    INTO NR
    FROM DOCTOR D
    JOIN SPITAL S ON (D.ID_SPITAL=S.ID_SPITAL)
    WHERE NUME=DENUMIRE;

    IF NR=0 THEN
        DBMS_OUTPUT.PUT_LINE('Nu lucreaza doctori la acest spital.');
    ELSIF NR=1 THEN
        DBMS_OUTPUT.PUT_LINE('Numarul de doctori care lucreaza in acest spital este : ' || NR);
        DBMS_OUTPUT.PUT_LINE('Doctorul si programul lui sunt : ');
    ELSE 
        DBMS_OUTPUT.PUT_LINE('Numarul de doctori care lucreaza in acest spital este : ' || NR);
        DBMS_OUTPUT.PUT_LINE('Doctorii si programul lor sunt : ');
    END IF;
    
    FOR C_DOCTOR IN C LOOP
        T.EXTEND;
        T(T.LAST).NUME:=C_DOCTOR.NUME_DOCTOR;
        T(T.LAST).PRENUME:=C_DOCTOR.PRENUME_DOCTOR; 
        
        SELECT START_ORA, END_ORA, ZI
        BULK COLLECT INTO
        T(T.LAST).START_ORA, T(T.LAST).END_ORA, T(T.LAST).ZI
        FROM SPITAL S
        JOIN DOCTOR D ON (D.ID_SPITAL=S.ID_SPITAL)
        JOIN PROGRAM_DOCTOR P ON (D.ID_DOCTOR=P.ID_DOCTOR)
        WHERE D.NUME_DOCTOR=C_DOCTOR.NUME_DOCTOR AND D.PRENUME_DOCTOR=C_DOCTOR.PRENUME_DOCTOR; 
    END LOOP; 
    
    FOR I IN T.FIRST..T.LAST LOOP
        DBMS_OUTPUT.PUT_LINE(T(I).NUME || ' ' || T(I).PRENUME);
        FOR J IN T(I).START_ORA.FIRST..T(I).START_ORA.LAST LOOP
            DBMS_OUTPUT.PUT_LINE('In ziua de ' || T(I).ZI(J) || ' lucreaza de la ' || T(I).START_ORA(J) || ' la ' || T(I).END_ORA(J));
        END LOOP;
    END LOOP;
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000,'Nu exista spitale cu numele dat');
        WHEN TOO_MANY_ROWS THEN
            RAISE_APPLICATION_ERROR(-20001,'Exista mai multe spitale cu numele dat');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');
END P6;
    PROCEDURE P7(DENUMIRE SPITAL.NUME%TYPE)
IS 
    AUX_DATA_PROGRAMARE PROGRAMARE.DATA_PROGRAMARE%TYPE;
    AUX_COD_SECTIE PROGRAMARE.ID_SECTIE%TYPE;
    NUMELE DOCTOR.NUME_DOCTOR%TYPE;
    PRENUMELE DOCTOR.PRENUME_DOCTOR%TYPE;
    NUME_SPITAL SPITAL.NUME%TYPE;
    
    CURSOR A IS 
        SELECT DATA_PROGRAMARE, PROG.ID_SECTIE 
        FROM SPITAL S
        INNER JOIN PACIENT P ON(S.ID_SPITAL=P.ID_SPITAL)
        INNER JOIN PROGRAMARE PROG ON(P.ID_PACIENT=PROG.ID_PACIENT)
        WHERE S.NUME=DENUMIRE;  
        
    CURSOR B(DATA_PROGRAMARE PROGRAMARE.DATA_PROGRAMARE%TYPE,COD_SECTIE PROGRAMARE.ID_SECTIE%TYPE) IS 
        SELECT NUME_DOCTOR, PRENUME_DOCTOR
        FROM DOCTOR D
        INNER JOIN PROGRAM_DOCTOR P ON(D.ID_DOCTOR=P.ID_DOCTOR) 
        INNER JOIN SPITAL S ON(D.ID_SPITAL=S.ID_SPITAL)
        WHERE S.NUME = DENUMIRE AND D.ID_SECTIE=COD_SECTIE AND EXTRACT(HOUR FROM DATA_PROGRAMARE) BETWEEN P.START_ORA AND P.END_ORA AND TO_CHAR(DATA_PROGRAMARE, 'DAY')=P.ZI;
BEGIN
    SELECT NUME 
    INTO NUME_SPITAL
    FROM SPITAL
    WHERE NUME=DENUMIRE;
    
    DBMS_OUTPUT.PUT_LINE('Spitalul ales este ' || ' ' || NUME_SPITAL);

    OPEN A;
    LOOP 
        FETCH A INTO AUX_DATA_PROGRAMARE,AUX_COD_SECTIE;
        EXIT WHEN A%NOTFOUND;
        IF B%ISOPEN THEN 
            CLOSE B;
        END IF; 
        OPEN B(AUX_DATA_PROGRAMARE,AUX_COD_SECTIE);
        LOOP
            FETCH B INTO NUMELE,PRENUMELE; 
            DBMS_OUTPUT.PUT_LINE(NUMELE || ' ' || PRENUMELE);
            EXIT WHEN B%NOTFOUND; 
        END LOOP;
        CLOSE B;
    END LOOP;
    CLOSE A;  
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000,'Nu exista spitalul cu numele dat');
        WHEN TOO_MANY_ROWS THEN
            RAISE_APPLICATION_ERROR(-20001,'Exista mai multe spitale cu numele dat');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');
END P7;
    FUNCTION F8(NUME PACIENT.NUME_PACIENT%TYPE)
RETURN TIP_MEDICAMENTE 
IS 
    NOUA_LISTA_MEDICAMENTE TIP_MEDICAMENTE:= TIP_MEDICAMENTE();
    AUX_LISTA_MEDICAMENTE TIP_MEDICAMENTE:=TIP_MEDICAMENTE();
    AUX_LISTA_ALERGII TIP_ALERGII:=TIP_ALERGII();  
    AUX1_LISTA_ALERGII TIP_ALERGII:=TIP_ALERGII();  
    NR NUMBER(2);
    AUX_NR NUMBER(2);
    COD_SECTIE SECTIE.ID_SECTIE%TYPE;
    COD_DOCTOR DOCTOR.ID_DOCTOR%TYPE;
    COD_SPITAL SPITAL.ID_SPITAL%TYPE;
    COD_RETETA RETETA.ID_RETETA%TYPE;
BEGIN
    AUX_LISTA_MEDICAMENTE.EXTEND;
    AUX_LISTA_MEDICAMENTE(1):='XX';

    SELECT NVL(LISTA_MEDICAMENTE,AUX_LISTA_MEDICAMENTE)
    INTO NOUA_LISTA_MEDICAMENTE
    FROM RETETA R 
    INNER JOIN CONSULT C ON (C.ID_CONSULT = R.ID_CONSULT)
    INNER JOIN INTERNARE I ON(I.ID_INTERNARE = C.ID_INTERNARE)
    INNER JOIN PACIENT P ON(P.ID_PACIENT = I.ID_PACIENT)
    WHERE NUME_PACIENT=NUME;
    
    SELECT ID_RETETA
    INTO COD_RETETA
    FROM RETETA R 
    INNER JOIN CONSULT C ON (C.ID_CONSULT = R.ID_CONSULT)
    INNER JOIN INTERNARE I ON(I.ID_INTERNARE = C.ID_INTERNARE)
    INNER JOIN PACIENT P ON(P.ID_PACIENT = I.ID_PACIENT)
    WHERE NUME_PACIENT=NUME;
    
    SELECT D.ID_DOCTOR
    INTO COD_DOCTOR
    FROM DOCTOR D 
    INNER JOIN CONSULT C ON(C.ID_DOCTOR=D.ID_DOCTOR)
    INNER JOIN RETETA R ON(R.ID_CONSULT=C.ID_CONSULT)
    WHERE ID_RETETA=COD_RETETA; 
    
    SELECT D.ID_SECTIE  
    INTO COD_SECTIE
    FROM DOCTOR D 
    INNER JOIN CONSULT C ON(C.ID_DOCTOR=D.ID_DOCTOR)
    INNER JOIN RETETA R ON(R.ID_CONSULT=C.ID_CONSULT)
    WHERE ID_RETETA=COD_RETETA;
    
    AUX1_LISTA_ALERGII.EXTEND;
    AUX1_LISTA_ALERGII(1):='XX';

    SELECT NVL(LISTA_ALERGII,AUX_LISTA_ALERGII), ID_SPITAL 
    INTO AUX_LISTA_ALERGII, COD_SPITAL
    FROM PACIENT
    WHERE NUME_PACIENT=NUME;

    NR:=0;
    NR:=NOUA_LISTA_MEDICAMENTE.COUNT;
    AUX_NR:=NR;

    FOR I IN 1..AUX_NR LOOP
        FOR J IN AUX_LISTA_ALERGII.FIRST..AUX_LISTA_ALERGII.LAST LOOP
            IF NOUA_LISTA_MEDICAMENTE(I)=AUX_LISTA_ALERGII(J) THEN
                FOR K IN I..AUX_NR-1 LOOP
                    NOUA_LISTA_MEDICAMENTE(K):=NOUA_LISTA_MEDICAMENTE(K+1);  
                END LOOP;
                AUX_NR:=AUX_NR-1;
            END IF;
        END LOOP;
    END LOOP;

    IF AUX_NR < NR THEN 
        DBMS_OUTPUT.PUT_LINE('S-au gasit medicamente la care pacientul ' || NUME || ' are alergii. Reteta corecta este : ');
        FOR I IN 1..AUX_NR LOOP
            DBMS_OUTPUT.PUT_LINE(NOUA_LISTA_MEDICAMENTE(I));
        END LOOP; 
        DBMS_OUTPUT.PUT_LINE('Ne pare rau pentru greseala! Doctorului i se va scadea salariul.');
        
        UPDATE DOCTOR A
        SET A.SALARIU =
            (SELECT MIN(B.SALARIU)
            FROM DOCTOR B
            WHERE A.ID_SECTIE=B.ID_SECTIE AND A.ID_SPITAL=B.ID_SPITAL)
        WHERE ID_DOCTOR=COD_DOCTOR;    
    ELSE 
        DBMS_OUTPUT.PUT_LINE('Nu s-au gasit medicamente la care ' || NUME || ' este alergic.');
    END IF; 

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000,'Nu exista pacienti cu numele dat');
        WHEN TOO_MANY_ROWS THEN
            RAISE_APPLICATION_ERROR(-20001,'Exista mai multi pacienti cu numele dat');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');

    RETURN NOUA_LISTA_MEDICAMENTE;

END F8;
    
    PROCEDURE P9(DENUMIRE SPITAL.NUME%TYPE)
IS
    DOCTORI TIP_DOCTORI:=TIP_DOCTORI();
    COD_SPITAL SPITAL.ID_SPITAL%TYPE;
    NUME_D DOCTOR.NUME_DOCTOR%TYPE;
    PRENUME_D DOCTOR.PRENUME_DOCTOR%TYPE;
BEGIN
    SELECT ID_SPITAL
    INTO COD_SPITAL
    FROM SPITAL
    WHERE NUME=DENUMIRE;
    
    SELECT DISTINCT D.ID_DOCTOR 
    BULK COLLECT INTO DOCTORI
    FROM DOCTOR D
    INNER JOIN DOCTOR_OPERATIE DO ON(D.ID_DOCTOR=DO.ID_DOCTOR)
    INNER JOIN OPERATIE O ON(O.ID_OPERATIE=DO.ID_OPERATIE)
    INNER JOIN OPERATIE_INTERNARE OI ON(OI.ID_OPERATIE=O.ID_OPERATIE)
    INNER JOIN INTERNARE I ON(I.ID_INTERNARE=OI.ID_INTERNARE)
    INNER JOIN SPITAL S ON(S.ID_SPITAL=I.ID_SPITAL)
    INNER JOIN PROGRAM_DOCTOR PD ON(PD.ID_DOCTOR=D.ID_DOCTOR)
    WHERE D.ID_SPITAL=COD_SPITAL AND PD.END_ORA<O.START_ORA;

    
    UPDATE DOCTOR 
    SET SALARIU = SALARIU + SALARIU * 0.1
    WHERE ID_DOCTOR IN 
        (SELECT DISTINCT D.ID_DOCTOR 
        FROM DOCTOR D
        INNER JOIN DOCTOR_OPERATIE DO ON(D.ID_DOCTOR=DO.ID_DOCTOR)
        INNER JOIN OPERATIE O ON(O.ID_OPERATIE=DO.ID_OPERATIE)
        INNER JOIN OPERATIE_INTERNARE OI ON(OI.ID_OPERATIE=O.ID_OPERATIE)
        INNER JOIN INTERNARE I ON(I.ID_INTERNARE=OI.ID_INTERNARE)
        INNER JOIN SPITAL S ON(S.ID_SPITAL=I.ID_SPITAL)
        INNER JOIN PROGRAM_DOCTOR PD ON(PD.ID_DOCTOR=D.ID_DOCTOR)
        WHERE D.ID_SPITAL=COD_SPITAL AND PD.END_ORA<O.START_ORA);
        
    IF DOCTORI.COUNT=0 THEN
        DBMS_OUTPUT.PUT_LINE('Nu exista doctori care sa lucreze peste program la spitalul ' || DENUMIRE);
    ELSIF DOCTORI.COUNT=1 THEN
        DBMS_OUTPUT.PUT_LINE('Doctorul este caruia i s-a marit salariul este: ');
    ELSE 
        DBMS_OUTPUT.PUT_LINE('Doctorii carora li s-a marit salariul sunt: ');   
    END IF;
    
    FOR I IN DOCTORI.FIRST..DOCTORI.LAST LOOP
        SELECT NUME_DOCTOR, PRENUME_DOCTOR
        INTO NUME_D, PRENUME_D
        FROM DOCTOR 
        WHERE ID_DOCTOR=DOCTORI(I);
        DBMS_OUTPUT.PUT_LINE(NUME_D || ' ' || PRENUME_D);
    END LOOP;
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000,'Nu exista spitale cu numele dat');
        WHEN TOO_MANY_ROWS THEN
            RAISE_APPLICATION_ERROR(-20001,'Exista mai multe spitale cu numele dat');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');
END P9;
END PACHET13;


--exercitiu 14
CREATE OR REPLACE PACKAGE PACHET14 AS
    TYPE TIP_ORE IS VARRAY(100) OF NUMBER;
    TYPE TIP_ID IS VARRAY(100) OF NUMBER;
    TYPE TIP_DOCTORI IS VARRAY(100) OF VARCHAR2(30);
    TYPE TIP_SUBSPECIALIZARI IS VARRAY(100) OF VARCHAR2(30);
    TYPE TIP_PACIENT_NOU IS VARRAY(100) OF VARCHAR2(10);
    PROCEDURE P10(NUME PACIENT.NUME_PACIENT%TYPE);
    PROCEDURE P11(DENUMIRE SECTIE.NUME%TYPE);
    TYPE PACIENT_RECORD IS RECORD
        (NUME PACIENT.NUME_PACIENT%TYPE,
        PRENUME PACIENT.PRENUME_PACIENT%TYPE,
        COD_SPITAL PACIENT.ID_SPITAL%TYPE,
        DATA_PROG PROGRAMARE.DATA_PROGRAMARE%TYPE,
        COD_SECTIE PROGRAMARE.ID_SECTIE%TYPE,
        COD_INTERNARE INTERNARE.ID_INTERNARE%TYPE
        ); 
    TYPE TIP_PACIENT IS VARRAY(100) OF PACIENT_RECORD;
    FUNCTION F12(COD SPITAL.ID_SPITAL%TYPE)
    RETURN NUMBER;
    FUNCTION F13(COD SPITAL.ID_SPITAL%TYPE)
    RETURN NUMBER;
END PACHET14;
/ 
CREATE OR REPLACE PACKAGE BODY PACHET14 IS 
    PROCEDURE P10(NUME PACIENT.NUME_PACIENT%TYPE) IS
        LISTA_ID TIP_ID:=TIP_ID();
        LISTA_ORE TIP_ORE:= TIP_ORE();
        LISTA_DOCTORI TIP_DOCTORI:=TIP_DOCTORI();
        COD_PACIENT PACIENT.ID_PACIENT%TYPE;
    BEGIN
        SELECT ID_PACIENT 
        INTO COD_PACIENT
        FROM PACIENT 
        WHERE NUME_PACIENT=NUME;
        
        SELECT DISTINCT O.START_ORA, O.ID_OPERATIE
        BULK COLLECT INTO LISTA_ORE, LISTA_ID 
        FROM PACIENT P
        INNER JOIN INTERNARE I ON(I.ID_PACIENT=P.ID_PACIENT)
        INNER JOIN OPERATIE_INTERNARE OI ON(OI.ID_INTERNARE=I.ID_INTERNARE)
        INNER JOIN OPERATIE O ON(O.ID_OPERATIE=OI.ID_OPERATIE)
        WHERE P.ID_PACIENT=COD_PACIENT AND I.STATUS=1;
        
        IF LISTA_ORE.COUNT = 0 THEN
            DBMS_OUTPUT.PUT_LINE('Pacientul nu are nicio operatie');
        ELSE
            DBMS_OUTPUT.PUT_LINE('Orele la care pacientul are operatii sunt : ');
            FOR I IN LISTA_ORE.FIRST..LISTA_ORE.LAST LOOP
                DBMS_OUTPUT.PUT_LINE(LISTA_ORE(I));
                SELECT D.NUME_DOCTOR
                BULK COLLECT INTO LISTA_DOCTORI
                FROM OPERATIE O 
                INNER JOIN DOCTOR_OPERATIE DO ON (DO.ID_OPERATIE=O.ID_OPERATIE)
                INNER JOIN DOCTOR D ON(D.ID_DOCTOR=DO.ID_DOCTOR)
                WHERE O.ID_OPERATIE=LISTA_ID(I);
                
                DBMS_OUTPUT.PUT_LINE('Doctorii care lucreaza la operatie sunt :');
                
                FOR J IN LISTA_DOCTORI.FIRST..LISTA_DOCTORI.LAST LOOP
                    DBMS_OUTPUT.PUT_LINE(LISTA_DOCTORI(J));
                END LOOP;
            END LOOP;
       END IF; 
       
       EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000,'Nu exista pacienti cu numele dat');
        WHEN TOO_MANY_ROWS THEN
            RAISE_APPLICATION_ERROR(-20001,'Exista mai multi pacienti cu numele dat');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');
    END P10;
    
    PROCEDURE P11(DENUMIRE SECTIE.NUME%TYPE) IS 
        COD_SECTIE SECTIE.ID_SECTIE%TYPE;
        LISTA_SUBSPECIALIZARI TIP_SUBSPECIALIZARI:=TIP_SUBSPECIALIZARI();
    BEGIN 
        SELECT ID_SECTIE
        INTO COD_SECTIE
        FROM SECTIE
        WHERE NUME=DENUMIRE;
        
        SELECT A.DENUMIRE 
        BULK COLLECT INTO LISTA_SUBSPECIALIZARI
        FROM SECTIE S 
        INNER JOIN DOCTOR D ON(D.ID_SECTIE=S.ID_SECTIE)
        INNER JOIN SPECIALIZARE A ON(A.ID_SPECIALIZARE=D.ID_SPECIALIZARE)
        INNER JOIN SPECIALIZARE B ON ( A.ID_SPECIALIZARE_MAMA=B.ID_SPECIALIZARE)
        WHERE S.ID_SECTIE=COD_sECTIE;
        
        IF LISTA_SUBSPECIALIZARI.COUNT = 0 THEN
            DBMS_OUTPUT.PUT_LINE('Sectia nu are niciun doctor cu subspecializare');
        ELSE
            DBMS_OUTPUT.PUT_LINE('Subspecializarile doctorilor sunt : ');
            FOR I IN LISTA_SUBSPECIALIZARI.FIRST..LISTA_SUBSPECIALIZARI.LAST LOOP
                DBMS_OUTPUT.PUT_LINE(LISTA_SUBSPECIALIZARI(I));
            END LOOP;
       END IF; 
       
       EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000,'Nu exista sectii cu numele dat');
        WHEN TOO_MANY_ROWS THEN
            RAISE_APPLICATION_ERROR(-20001,'Exista mai multi sectii cu numele dat');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002,'Alta eroare!');
        
    END P11;
    
    FUNCTION F12(COD SPITAL.ID_SPITAL%TYPE)
    RETURN NUMBER IS 
        NR NUMBER;
        DATE_PACIENT TIP_PACIENT:=TIP_PACIENT();
    BEGIN
        SELECT DISTINCT P.NUME_PACIENT, P.PRENUME_PACIENT, P.ID_SPITAL, PROG.DATA_PROGRAMARE, PROG.ID_SECTIE, I.ID_INTERNARE 
        BULK COLLECT INTO DATE_PACIENT
        FROM SPITAL S 
        INNER JOIN PACIENT P ON(S.ID_SPITAL=P.ID_SPITAL) 
        INNER JOIN PROGRAMARE PROG ON(PROG.ID_PACIENT=P.ID_PACIENT)
        INNER JOIN INTERNARE I ON(I.ID_PACIENT = P.ID_PACIENT)
        WHERE S.ID_SPITAL=COD;
        
        NR:=DATE_PACIENT.COUNT;
        
        IF NR=0 THEN
            DBMS_OUTPUT.PUT_LINE('Nu exista pacienti la acest spital.');
        ELSE 
            DBMS_OUTPUT.PUT_LINE('Pacientii si datele lor sunt : ');
            FOR I IN DATE_PACIENT.FIRST..DATE_PACIENT.LAST LOOP
                DBMS_OUTPUT.PUT_LINE(DATE_PACIENT(I).NUME || ' ' || DATE_PACIENT(I).PRENUME || ' ' || DATE_PACIENT(I).COD_SPITAL || ' ' || DATE_PACIENT(I).DATA_PROG || ' ' || DATE_PACIENT(I).COD_SECTIE || ' ' || DATE_PACIENT(I).COD_INTERNARE);
            END LOOP;
        END IF;
        
        RETURN NR;
    END F12;
    
    FUNCTION F13(COD SPITAL.ID_SPITAL%TYPE)
    RETURN NUMBER IS 
        NR NUMBER;
        LISTA_PACIENTI_NOU TIP_PACIENT_NOU:=TIP_PACIENT_NOU();
        DATA_CURENTA DATE;
    BEGIN
        SELECT CURRENT_DATE
        INTO DATA_CURENTA
        FROM DUAL;
        
        SELECT NUME_PACIENT
        BULK COLLECT INTO LISTA_PACIENTI_NOU
        FROM SPITAL S 
        INNER JOIN PACIENT P ON(P.ID_SPITAL=S.ID_SPITAL)
        INNER JOIN PROGRAMARE PROG ON(PROG.ID_PACIENT=P.ID_PACIENT)
        INNER JOIN INTERNARE I ON(I.ID_SPITAL=S.ID_SPITAL)
        WHERE S.ID_SPITAL=COD OR I.STATUS=1 AND PROG.DATA_PROGRAMARE < DATA_CURENTA OR I.DATA_INTERNARE < DATA_CURENTA;
        
        NR:=LISTA_PACIENTI_NOU.COUNT;
        
        IF NR= 0 THEN
            DBMS_OUTPUT.PUT_LINE('Nu au fost pacienti pana acum.');
        ELSE 
            DBMS_OUTPUT.PUT_LINE('Pacientii internati sau consultati pana acum la spitalul ales sunt : ');
            FOR I IN LISTA_PACIENTI_NOU.FIRST..LISTA_PACIENTI_NOU.LAST LOOP
                DBMS_OUTPUT.PUT_LINE(LISTA_PACIENTI_NOU(I));
            END LOOP;
        END IF;
        
    RETURN NR;
    END F13;
END PACHET14;

 
 